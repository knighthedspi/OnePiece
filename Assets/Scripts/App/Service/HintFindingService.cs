// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 4.0.30319.1
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------
using UnityEngine;
using System.Collections;
using System.Collections.Generic;

public partial class GamePlayService{

	/// <summary>
	/// Checks the is same type of block.
	/// </summary>
	/// <returns><c>true</c>, if is same type of block was checked, <c>false</c> otherwise.</returns>
	/// <param name="b1">B1.</param>
	/// <param name="b2">B2.</param>
	private bool checkIsSameTypeOfBlock(Block b1,Block b2)
	{
		return (b1.blockType == b2.blockType);
	}
	
	/// <summary>
	/// Search the specified way for block[x, y], result will be kept in matchingSet.
	/// </summary>
	/// <param name="x">The x coordinate.</param>
	/// <param name="y">The y coordinate.</param>
	/// <param name="type">Type of block</param>
	/// <param name="matchingSet">Matching set.</param>
	private void Search(int x,int y,Block type,List<Block> matchingSet)
	{
		
		if(checkIsSameTypeOfBlock(_blocks[x, y], type)) {
			matchingSet.Add(_blocks[x, y]);
			_visited[x, y] = true;
			if(x < _blockNum.x - 1 && !_visited[x + 1, y]) {
				Search(x + 1, y, type, matchingSet);
			}
			
			if(y < _blockNum.y - 1 && !_visited[x, y + 1]) {
				Search(x, y + 1, type, matchingSet);
			}
			
			if(x > 0 && !_visited[x - 1, y]) {
				Search(x - 1, y, type, matchingSet);
			}
			
			if(y > 0 && !_visited[x, y - 1]) {
				Search(x, y - 1, type, matchingSet);
			}
			
			if(x % 2 != 0) {
				if(x < _blockNum.x - 1 && y > 0 && !_visited[x + 1, y - 1]) {
					Search(x + 1, y - 1, type, matchingSet);
				}
				
				if(x > 0 && y > 0 && !_visited[x - 1, y - 1]) {
					Search(x - 1, y - 1, type, matchingSet);
				}
			} else {
				if(x < _blockNum.x - 1 && y < _blockNum.y - 1 && !_visited[x + 1, y + 1]) {
					Search(x + 1, y + 1, type, matchingSet);
				}
				
				if(x > 0 && y < _blockNum.y - 1 && !_visited[x - 1, y + 1]) {
					Search(x - 1, y + 1, type, matchingSet);
				}
			}
		}
	}
	
	/// <summary>
	/// Clears the _visited match.
	/// </summary>
	private void ClearVisitedMatch()
	{
		for(int x = 0;x < (int) _blockNum.x;x ++) {
			for(int y = 0;y < (int) _blockNum.y;y++) {
				_visited[x, y] = false;
			}
		}
	}
	
	/// <summary>
	/// Finds all the matches.
	/// </summary>
	private void FindMatches()
	{
		ClearVisitedMatch();
		_hints.Clear();
		
		for(int x = 0;x < (int) _blockNum.x;x++) {
			for(int y = 0;y <  (int) _blockNum.y;y++) {
				if(!_visited[x, y]) {
					_visited[x, y] = true;
					List<Block> matchingSet = new List<Block>();
					Search(x, y, _blocks[x, y], matchingSet);
					if(matchingSet.Count > _hints.Count && matchingSet.Count > 2) {
						_hints = matchingSet;
					}
				}
			}
		}
		
	}
	
	/// <summary>
	/// Finds the hint that has maximum same type of blocks
	/// </summary>
	public List<Block> FindHint()
	{
		FindMatches();
		return _hints;
	}

}
